/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MarkdownPage,
} from '../models';
import {
    MarkdownPageFromJSON,
    MarkdownPageToJSON,
} from '../models';

export interface ApiInfoMarkdownPagesCreatePutRequest {
    xAPIKey?: string;
    markdownPage?: MarkdownPage;
}

export interface ApiInfoMarkdownPagesDeleteByIdPutRequest {
    id?: number;
    xAPIKey?: string;
}

export interface ApiInfoMarkdownPagesGetAllGetRequest {
    xAPIKey?: string;
}

export interface ApiInfoMarkdownPagesGetByIdGetRequest {
    id?: number;
    xAPIKey?: string;
}

export interface ApiInfoMarkdownPagesGetMarkdownPagesForGetRequest {
    providerName?: string;
    xAPIKey?: string;
}

export interface ApiInfoMarkdownPagesUpdatePutRequest {
    xAPIKey?: string;
    markdownPage?: MarkdownPage;
}

/**
 * 
 */
export class MarkdownPagesApi extends runtime.BaseAPI {

    /**
     */
    async apiInfoMarkdownPagesCreatePutRaw(requestParameters: ApiInfoMarkdownPagesCreatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/info/markdown-pages/Create`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarkdownPageToJSON(requestParameters.markdownPage),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiInfoMarkdownPagesCreatePut(requestParameters: ApiInfoMarkdownPagesCreatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiInfoMarkdownPagesCreatePutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiInfoMarkdownPagesDeleteByIdPutRaw(requestParameters: ApiInfoMarkdownPagesDeleteByIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/info/markdown-pages/DeleteById`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiInfoMarkdownPagesDeleteByIdPut(requestParameters: ApiInfoMarkdownPagesDeleteByIdPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiInfoMarkdownPagesDeleteByIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiInfoMarkdownPagesGetAllGetRaw(requestParameters: ApiInfoMarkdownPagesGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarkdownPage>>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/info/markdown-pages/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarkdownPageFromJSON));
    }

    /**
     */
    async apiInfoMarkdownPagesGetAllGet(requestParameters: ApiInfoMarkdownPagesGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarkdownPage>> {
        const response = await this.apiInfoMarkdownPagesGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInfoMarkdownPagesGetByIdGetRaw(requestParameters: ApiInfoMarkdownPagesGetByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkdownPage>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/info/markdown-pages/GetById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarkdownPageFromJSON(jsonValue));
    }

    /**
     */
    async apiInfoMarkdownPagesGetByIdGet(requestParameters: ApiInfoMarkdownPagesGetByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkdownPage> {
        const response = await this.apiInfoMarkdownPagesGetByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInfoMarkdownPagesGetMarkdownPagesForGetRaw(requestParameters: ApiInfoMarkdownPagesGetMarkdownPagesForGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarkdownPage>>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/info/markdown-pages/GetMarkdownPagesFor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarkdownPageFromJSON));
    }

    /**
     */
    async apiInfoMarkdownPagesGetMarkdownPagesForGet(requestParameters: ApiInfoMarkdownPagesGetMarkdownPagesForGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarkdownPage>> {
        const response = await this.apiInfoMarkdownPagesGetMarkdownPagesForGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiInfoMarkdownPagesUpdatePutRaw(requestParameters: ApiInfoMarkdownPagesUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/info/markdown-pages/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarkdownPageToJSON(requestParameters.markdownPage),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiInfoMarkdownPagesUpdatePut(requestParameters: ApiInfoMarkdownPagesUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiInfoMarkdownPagesUpdatePutRaw(requestParameters, initOverrides);
    }

}
