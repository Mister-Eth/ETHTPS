/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IMarkdownPage,
  MarkdownPage,
} from '../models';
import {
    IMarkdownPageFromJSON,
    IMarkdownPageToJSON,
    MarkdownPageFromJSON,
    MarkdownPageToJSON,
} from '../models';

export interface ApiV3MarkdownPagesCreateCreatePostRequest {
    xAPIKey?: string;
    markdownPage?: MarkdownPage;
}

export interface ApiV3MarkdownPagesDeleteByIdDeleteByIdDeleteRequest {
    xAPIKey?: string;
    id?: number;
}

export interface ApiV3MarkdownPagesGetAllGetAllGetRequest {
    xAPIKey?: string;
}

export interface ApiV3MarkdownPagesGetByIdGetByIdGetRequest {
    xAPIKey?: string;
    id?: number;
}

export interface ApiV3MarkdownPagesGetMarkdownPagesForGetRequest {
    xAPIKey?: string;
    providerName?: string;
}

export interface ApiV3MarkdownPagesUpdateUpdatePutRequest {
    xAPIKey?: string;
    markdownPage?: MarkdownPage;
}

/**
 * 
 */
export class MarkdownPagesApi extends runtime.BaseAPI {

    /**
     */
    async apiV3MarkdownPagesCreateCreatePostRaw(requestParameters: ApiV3MarkdownPagesCreateCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/Create/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarkdownPageToJSON(requestParameters.markdownPage),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3MarkdownPagesCreateCreatePost(requestParameters: ApiV3MarkdownPagesCreateCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3MarkdownPagesCreateCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV3MarkdownPagesDeleteByIdDeleteByIdDeleteRaw(requestParameters: ApiV3MarkdownPagesDeleteByIdDeleteByIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/DeleteById/DeleteById`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3MarkdownPagesDeleteByIdDeleteByIdDelete(requestParameters: ApiV3MarkdownPagesDeleteByIdDeleteByIdDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3MarkdownPagesDeleteByIdDeleteByIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV3MarkdownPagesGetAllGetAllGetRaw(requestParameters: ApiV3MarkdownPagesGetAllGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MarkdownPage>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/GetAll/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MarkdownPageFromJSON));
    }

    /**
     */
    async apiV3MarkdownPagesGetAllGetAllGet(requestParameters: ApiV3MarkdownPagesGetAllGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MarkdownPage>> {
        const response = await this.apiV3MarkdownPagesGetAllGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3MarkdownPagesGetByIdGetByIdGetRaw(requestParameters: ApiV3MarkdownPagesGetByIdGetByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkdownPage>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/GetById/GetById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarkdownPageFromJSON(jsonValue));
    }

    /**
     */
    async apiV3MarkdownPagesGetByIdGetByIdGet(requestParameters: ApiV3MarkdownPagesGetByIdGetByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkdownPage> {
        const response = await this.apiV3MarkdownPagesGetByIdGetByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3MarkdownPagesGetMarkdownPagesForGetRaw(requestParameters: ApiV3MarkdownPagesGetMarkdownPagesForGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IMarkdownPage>>> {
        const queryParameters: any = {};

        if (requestParameters.providerName !== undefined) {
            queryParameters['providerName'] = requestParameters.providerName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/GetMarkdownPagesFor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IMarkdownPageFromJSON));
    }

    /**
     */
    async apiV3MarkdownPagesGetMarkdownPagesForGet(requestParameters: ApiV3MarkdownPagesGetMarkdownPagesForGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IMarkdownPage>> {
        const response = await this.apiV3MarkdownPagesGetMarkdownPagesForGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3MarkdownPagesUpdateUpdatePutRaw(requestParameters: ApiV3MarkdownPagesUpdateUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/markdown-pages/Update/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarkdownPageToJSON(requestParameters.markdownPage),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3MarkdownPagesUpdateUpdatePut(requestParameters: ApiV3MarkdownPagesUpdateUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3MarkdownPagesUpdateUpdatePutRaw(requestParameters, initOverrides);
    }

}
