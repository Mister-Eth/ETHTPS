/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StackedChartModel,
  StreamchartModel,
  TimeInterval,
} from '../models';
import {
    StackedChartModelFromJSON,
    StackedChartModelToJSON,
    StreamchartModelFromJSON,
    StreamchartModelToJSON,
    TimeIntervalFromJSON,
    TimeIntervalToJSON,
} from '../models';

export interface ApiV3ChartDataGetStackedChartDataGetRequest {
    xAPIKey?: string;
    interval?: TimeInterval;
    count?: number;
    dataType?: string;
    combineSeriesWithAverageLessThanPercentage?: number;
    orderByDateAscending?: boolean;
    noDuplicates?: boolean;
    removeNullValues?: boolean;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV3ChartDataGetStreamchartDataGetRequest {
    xAPIKey?: string;
    interval?: TimeInterval;
    count?: number;
    dataType?: string;
    combineSeriesWithAverageLessThanPercentage?: number;
    orderByDateAscending?: boolean;
    noDuplicates?: boolean;
    removeNullValues?: boolean;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

/**
 * 
 */
export class ChartDataApi extends runtime.BaseAPI {

    /**
     */
    async apiV3ChartDataGetStackedChartDataGetRaw(requestParameters: ApiV3ChartDataGetStackedChartDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StackedChartModel>> {
        const queryParameters: any = {};

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['Count'] = requestParameters.count;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.combineSeriesWithAverageLessThanPercentage !== undefined) {
            queryParameters['CombineSeriesWithAverageLessThanPercentage'] = requestParameters.combineSeriesWithAverageLessThanPercentage;
        }

        if (requestParameters.orderByDateAscending !== undefined) {
            queryParameters['OrderByDateAscending'] = requestParameters.orderByDateAscending;
        }

        if (requestParameters.noDuplicates !== undefined) {
            queryParameters['NoDuplicates'] = requestParameters.noDuplicates;
        }

        if (requestParameters.removeNullValues !== undefined) {
            queryParameters['RemoveNullValues'] = requestParameters.removeNullValues;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/ChartData/GetStackedChartData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StackedChartModelFromJSON(jsonValue));
    }

    /**
     */
    async apiV3ChartDataGetStackedChartDataGet(requestParameters: ApiV3ChartDataGetStackedChartDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StackedChartModel> {
        const response = await this.apiV3ChartDataGetStackedChartDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3ChartDataGetStreamchartDataGetRaw(requestParameters: ApiV3ChartDataGetStreamchartDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamchartModel>> {
        const queryParameters: any = {};

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['Count'] = requestParameters.count;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.combineSeriesWithAverageLessThanPercentage !== undefined) {
            queryParameters['CombineSeriesWithAverageLessThanPercentage'] = requestParameters.combineSeriesWithAverageLessThanPercentage;
        }

        if (requestParameters.orderByDateAscending !== undefined) {
            queryParameters['OrderByDateAscending'] = requestParameters.orderByDateAscending;
        }

        if (requestParameters.noDuplicates !== undefined) {
            queryParameters['NoDuplicates'] = requestParameters.noDuplicates;
        }

        if (requestParameters.removeNullValues !== undefined) {
            queryParameters['RemoveNullValues'] = requestParameters.removeNullValues;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/ChartData/GetStreamchartData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamchartModelFromJSON(jsonValue));
    }

    /**
     */
    async apiV3ChartDataGetStreamchartDataGet(requestParameters: ApiV3ChartDataGetStreamchartDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamchartModel> {
        const response = await this.apiV3ChartDataGetStreamchartDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
