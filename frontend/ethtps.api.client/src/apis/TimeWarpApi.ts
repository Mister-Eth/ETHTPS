/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataPoint,
  TimeWarpSyncProgressModel,
} from '../models';
import {
    DataPointFromJSON,
    DataPointToJSON,
    TimeWarpSyncProgressModelFromJSON,
    TimeWarpSyncProgressModelToJSON,
} from '../models';

export interface APITimeWarpGetEarliestDateGetRequest {
    xAPIKey?: string;
}

export interface APITimeWarpGetGPSAtGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

export interface APITimeWarpGetGasAdjustedTPSAtGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

export interface APITimeWarpGetSyncProgressGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

export interface APITimeWarpGetTPSAtGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

/**
 * 
 */
export class TimeWarpApi extends runtime.BaseAPI {

    /**
     */
    async aPITimeWarpGetEarliestDateGetRaw(requestParameters: APITimeWarpGetEarliestDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Date>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/TimeWarp/GetEarliestDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async aPITimeWarpGetEarliestDateGet(requestParameters: APITimeWarpGetEarliestDateGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Date> {
        const response = await this.aPITimeWarpGetEarliestDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPITimeWarpGetGPSAtGetRaw(requestParameters: APITimeWarpGetGPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/TimeWarp/GetGPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async aPITimeWarpGetGPSAtGet(requestParameters: APITimeWarpGetGPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.aPITimeWarpGetGPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPITimeWarpGetGasAdjustedTPSAtGetRaw(requestParameters: APITimeWarpGetGasAdjustedTPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/TimeWarp/GetGasAdjustedTPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async aPITimeWarpGetGasAdjustedTPSAtGet(requestParameters: APITimeWarpGetGasAdjustedTPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.aPITimeWarpGetGasAdjustedTPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPITimeWarpGetSyncProgressGetRaw(requestParameters: APITimeWarpGetSyncProgressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeWarpSyncProgressModel>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/TimeWarp/GetSyncProgress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeWarpSyncProgressModelFromJSON(jsonValue));
    }

    /**
     */
    async aPITimeWarpGetSyncProgressGet(requestParameters: APITimeWarpGetSyncProgressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeWarpSyncProgressModel> {
        const response = await this.aPITimeWarpGetSyncProgressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPITimeWarpGetTPSAtGetRaw(requestParameters: APITimeWarpGetTPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/TimeWarp/GetTPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async aPITimeWarpGetTPSAtGet(requestParameters: APITimeWarpGetTPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.aPITimeWarpGetTPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
