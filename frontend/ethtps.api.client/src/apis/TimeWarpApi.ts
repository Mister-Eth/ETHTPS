/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataPoint,
  TimeWarpSyncProgressModel,
} from '../models';
import {
    DataPointFromJSON,
    DataPointToJSON,
    TimeWarpSyncProgressModelFromJSON,
    TimeWarpSyncProgressModelToJSON,
} from '../models';

export interface ApiV3TimeWarpGetEarliestDateGetRequest {
    xAPIKey?: string;
}

export interface ApiV3TimeWarpGetGPSAtGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

export interface ApiV3TimeWarpGetGasAdjustedTPSAtGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

export interface ApiV3TimeWarpGetSyncProgressGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV3TimeWarpGetTPSAtGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    timestamp?: number;
    smoothing?: string;
    count?: number;
}

/**
 * 
 */
export class TimeWarpApi extends runtime.BaseAPI {

    /**
     */
    async apiV3TimeWarpGetEarliestDateGetRaw(requestParameters: ApiV3TimeWarpGetEarliestDateGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Date>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/TimeWarp/GetEarliestDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiV3TimeWarpGetEarliestDateGet(requestParameters: ApiV3TimeWarpGetEarliestDateGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Date> {
        const response = await this.apiV3TimeWarpGetEarliestDateGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3TimeWarpGetGPSAtGetRaw(requestParameters: ApiV3TimeWarpGetGPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/TimeWarp/GetGPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async apiV3TimeWarpGetGPSAtGet(requestParameters: ApiV3TimeWarpGetGPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.apiV3TimeWarpGetGPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3TimeWarpGetGasAdjustedTPSAtGetRaw(requestParameters: ApiV3TimeWarpGetGasAdjustedTPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/TimeWarp/GetGasAdjustedTPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async apiV3TimeWarpGetGasAdjustedTPSAtGet(requestParameters: ApiV3TimeWarpGetGasAdjustedTPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.apiV3TimeWarpGetGasAdjustedTPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3TimeWarpGetSyncProgressGetRaw(requestParameters: ApiV3TimeWarpGetSyncProgressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeWarpSyncProgressModel>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/TimeWarp/GetSyncProgress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeWarpSyncProgressModelFromJSON(jsonValue));
    }

    /**
     */
    async apiV3TimeWarpGetSyncProgressGet(requestParameters: ApiV3TimeWarpGetSyncProgressGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeWarpSyncProgressModel> {
        const response = await this.apiV3TimeWarpGetSyncProgressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3TimeWarpGetTPSAtGetRaw(requestParameters: ApiV3TimeWarpGetTPSAtGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataPoint>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/TimeWarp/GetTPSAt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataPointFromJSON));
    }

    /**
     */
    async apiV3TimeWarpGetTPSAtGet(requestParameters: ApiV3TimeWarpGetTPSAtGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataPoint>> {
        const response = await this.apiV3TimeWarpGetTPSAtGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
