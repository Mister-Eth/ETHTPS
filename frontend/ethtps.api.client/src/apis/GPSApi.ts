/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataPoint,
  DataResponseModel,
  TimeInterval,
} from '../models';
import {
    DataPointFromJSON,
    DataPointToJSON,
    DataResponseModelFromJSON,
    DataResponseModelToJSON,
    TimeIntervalFromJSON,
    TimeIntervalToJSON,
} from '../models';

export interface ApiV2GPSGetGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    interval?: TimeInterval;
}

export interface ApiV2GPSGetMonthlyDataByYearGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    year?: number;
}

export interface ApiV2GPSInstantGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV2GPSMaxGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

/**
 * 
 */
export class GPSApi extends runtime.BaseAPI {

    /**
     */
    async apiV2GPSGetGetRaw(requestParameters: ApiV2GPSGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<DataResponseModel>; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['interval'] = requestParameters.interval;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GPS/Get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2GPSGetGet(requestParameters: ApiV2GPSGetGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<DataResponseModel>; }> {
        const response = await this.apiV2GPSGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2GPSGetMonthlyDataByYearGetRaw(requestParameters: ApiV2GPSGetMonthlyDataByYearGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<DataResponseModel>; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GPS/GetMonthlyDataByYear`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2GPSGetMonthlyDataByYearGet(requestParameters: ApiV2GPSGetMonthlyDataByYearGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<DataResponseModel>; }> {
        const response = await this.apiV2GPSGetMonthlyDataByYearGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2GPSInstantGetRaw(requestParameters: ApiV2GPSInstantGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: Array<DataPoint>; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GPS/Instant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2GPSInstantGet(requestParameters: ApiV2GPSInstantGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: Array<DataPoint>; }> {
        const response = await this.apiV2GPSInstantGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2GPSMaxGetRaw(requestParameters: ApiV2GPSMaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: DataPoint; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GPS/Max`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, DataPointFromJSON));
    }

    /**
     */
    async apiV2GPSMaxGet(requestParameters: ApiV2GPSMaxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: DataPoint; }> {
        const response = await this.apiV2GPSMaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
