/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Provider,
} from '../models';
import {
    ProviderFromJSON,
    ProviderToJSON,
} from '../models';

export interface ApiV3ManagementProvidersCreatePostRequest {
    xAPIKey?: string;
    provider?: Provider;
}

export interface ApiV3ManagementProvidersDeleteByIdDeleteRequest {
    xAPIKey?: string;
    id?: number;
}

export interface ApiV3ManagementProvidersGetAllGetRequest {
    xAPIKey?: string;
}

export interface ApiV3ManagementProvidersGetByIdGetRequest {
    xAPIKey?: string;
    id?: number;
}

export interface ApiV3ManagementProvidersUpdatePutRequest {
    xAPIKey?: string;
    provider?: Provider;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     */
    async apiV3ManagementProvidersCreatePostRaw(requestParameters: ApiV3ManagementProvidersCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/management/providers/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderToJSON(requestParameters.provider),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3ManagementProvidersCreatePost(requestParameters: ApiV3ManagementProvidersCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3ManagementProvidersCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV3ManagementProvidersDeleteByIdDeleteRaw(requestParameters: ApiV3ManagementProvidersDeleteByIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/management/providers/DeleteById`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3ManagementProvidersDeleteByIdDelete(requestParameters: ApiV3ManagementProvidersDeleteByIdDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3ManagementProvidersDeleteByIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV3ManagementProvidersGetAllGetRaw(requestParameters: ApiV3ManagementProvidersGetAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Provider>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/management/providers/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON));
    }

    /**
     */
    async apiV3ManagementProvidersGetAllGet(requestParameters: ApiV3ManagementProvidersGetAllGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Provider>> {
        const response = await this.apiV3ManagementProvidersGetAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3ManagementProvidersGetByIdGetRaw(requestParameters: ApiV3ManagementProvidersGetByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/management/providers/GetById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     */
    async apiV3ManagementProvidersGetByIdGet(requestParameters: ApiV3ManagementProvidersGetByIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.apiV3ManagementProvidersGetByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3ManagementProvidersUpdatePutRaw(requestParameters: ApiV3ManagementProvidersUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/management/providers/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderToJSON(requestParameters.provider),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV3ManagementProvidersUpdatePut(requestParameters: ApiV3ManagementProvidersUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV3ManagementProvidersUpdatePutRaw(requestParameters, initOverrides);
    }

}
