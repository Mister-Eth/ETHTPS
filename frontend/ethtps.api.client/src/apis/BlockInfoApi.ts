/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IBlock,
} from '../models';
import {
    IBlockFromJSON,
    IBlockToJSON,
} from '../models';

export interface ApiV3BlockInfoGetBlocksBetweenGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    start?: Date;
    end?: Date;
}

export interface ApiV3BlockInfoGetLatestBlocksGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    period?: string;
}

/**
 * 
 */
export class BlockInfoApi extends runtime.BaseAPI {

    /**
     */
    async apiV3BlockInfoGetBlocksBetweenGetRaw(requestParameters: ApiV3BlockInfoGetBlocksBetweenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IBlock>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/BlockInfo/GetBlocksBetween`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IBlockFromJSON));
    }

    /**
     */
    async apiV3BlockInfoGetBlocksBetweenGet(requestParameters: ApiV3BlockInfoGetBlocksBetweenGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IBlock>> {
        const response = await this.apiV3BlockInfoGetBlocksBetweenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV3BlockInfoGetLatestBlocksGetRaw(requestParameters: ApiV3BlockInfoGetLatestBlocksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IBlock>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v3/BlockInfo/GetLatestBlocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IBlockFromJSON));
    }

    /**
     */
    async apiV3BlockInfoGetLatestBlocksGet(requestParameters: ApiV3BlockInfoGetLatestBlocksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IBlock>> {
        const response = await this.apiV3BlockInfoGetLatestBlocksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
