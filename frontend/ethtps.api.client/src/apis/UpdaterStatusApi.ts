/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LiveUpdaterStatus,
} from '../models';
import {
    LiveUpdaterStatusFromJSON,
    LiveUpdaterStatusToJSON,
} from '../models';

export interface ApiUpdaterStatusGetAllStatusesGetRequest {
    xAPIKey?: string;
}

export interface ApiUpdaterStatusGetStatusForGetRequest {
    provider?: string;
    updaterType?: string;
    xAPIKey?: string;
}

export interface ApiUpdaterStatusGetStatusesForGetRequest {
    provider?: string;
    xAPIKey?: string;
}

/**
 * 
 */
export class UpdaterStatusApi extends runtime.BaseAPI {

    /**
     */
    async apiUpdaterStatusGetAllStatusesGetRaw(requestParameters: ApiUpdaterStatusGetAllStatusesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiveUpdaterStatus>>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/UpdaterStatus/GetAllStatuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiveUpdaterStatusFromJSON));
    }

    /**
     */
    async apiUpdaterStatusGetAllStatusesGet(requestParameters: ApiUpdaterStatusGetAllStatusesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiveUpdaterStatus>> {
        const response = await this.apiUpdaterStatusGetAllStatusesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpdaterStatusGetStatusForGetRaw(requestParameters: ApiUpdaterStatusGetStatusForGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LiveUpdaterStatus>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.updaterType !== undefined) {
            queryParameters['updaterType'] = requestParameters.updaterType;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/UpdaterStatus/GetStatusFor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LiveUpdaterStatusFromJSON(jsonValue));
    }

    /**
     */
    async apiUpdaterStatusGetStatusForGet(requestParameters: ApiUpdaterStatusGetStatusForGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LiveUpdaterStatus> {
        const response = await this.apiUpdaterStatusGetStatusForGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpdaterStatusGetStatusesForGetRaw(requestParameters: ApiUpdaterStatusGetStatusesForGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiveUpdaterStatus>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/UpdaterStatus/GetStatusesFor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiveUpdaterStatusFromJSON));
    }

    /**
     */
    async apiUpdaterStatusGetStatusesForGet(requestParameters: ApiUpdaterStatusGetStatusesForGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiveUpdaterStatus>> {
        const response = await this.apiUpdaterStatusGetStatusesForGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
