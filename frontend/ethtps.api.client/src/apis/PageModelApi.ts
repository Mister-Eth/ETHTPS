/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataType,
  HomePageResponseModel,
  TimeInterval,
} from '../models';
import {
    DataTypeFromJSON,
    DataTypeToJSON,
    HomePageResponseModelFromJSON,
    HomePageResponseModelToJSON,
    TimeIntervalFromJSON,
    TimeIntervalToJSON,
} from '../models';

export interface ApiV2PagesHomeGetRequest {
    xAPIKey?: string;
    subchainsOf?: string;
    interval?: TimeInterval;
    dataType?: DataType;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV2PagesProviderGetRequest {
    xAPIKey?: string;
    interval?: TimeInterval;
    dataType?: DataType;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

/**
 * 
 */
export class PageModelApi extends runtime.BaseAPI {

    /**
     */
    async apiV2PagesHomeGetRaw(requestParameters: ApiV2PagesHomeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HomePageResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.subchainsOf !== undefined) {
            queryParameters['SubchainsOf'] = requestParameters.subchainsOf;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Pages/Home`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HomePageResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiV2PagesHomeGet(requestParameters: ApiV2PagesHomeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HomePageResponseModel> {
        const response = await this.apiV2PagesHomeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2PagesProviderGetRaw(requestParameters: ApiV2PagesProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Pages/Provider`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV2PagesProviderGet(requestParameters: ApiV2PagesProviderGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiV2PagesProviderGetRaw(requestParameters, initOverrides);
    }

}
