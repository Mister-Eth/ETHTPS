/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllDataModel,
  ProviderResponseModel,
} from '../models';
import {
    AllDataModelFromJSON,
    AllDataModelToJSON,
    ProviderResponseModelFromJSON,
    ProviderResponseModelToJSON,
} from '../models';

export interface APIV2AllDataGetRequest {
    xAPIKey?: string;
    network?: string;
}

export interface APIV2ColorDictionaryGetRequest {
    xAPIKey?: string;
}

export interface APIV2GetIntervalsWithDataGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

export interface APIV2GetUniqueDataYearsGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

export interface APIV2InstantDataGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
    smoothing?: string;
}

export interface APIV2IntervalsGetRequest {
    xAPIKey?: string;
}

export interface APIV2MaxGetRequest {
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

export interface APIV2NetworksGetRequest {
    xAPIKey?: string;
}

export interface APIV2ProviderTypesColorDictionaryGetRequest {
    xAPIKey?: string;
}

export interface APIV2ProvidersGetRequest {
    xAPIKey?: string;
    subchainsOf?: string;
}

/**
 * 
 */
export class GeneralApi extends runtime.BaseAPI {

    /**
     */
    async aPIV2AllDataGetRaw(requestParameters: APIV2AllDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllDataModel>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/AllData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllDataModelFromJSON(jsonValue));
    }

    /**
     */
    async aPIV2AllDataGet(requestParameters: APIV2AllDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllDataModel> {
        const response = await this.aPIV2AllDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2ColorDictionaryGetRaw(requestParameters: APIV2ColorDictionaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/ColorDictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2ColorDictionaryGet(requestParameters: APIV2ColorDictionaryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.aPIV2ColorDictionaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2GetIntervalsWithDataGetRaw(requestParameters: APIV2GetIntervalsWithDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/GetIntervalsWithData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2GetIntervalsWithDataGet(requestParameters: APIV2GetIntervalsWithDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.aPIV2GetIntervalsWithDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2GetUniqueDataYearsGetRaw(requestParameters: APIV2GetUniqueDataYearsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/GetUniqueDataYears`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2GetUniqueDataYearsGet(requestParameters: APIV2GetUniqueDataYearsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.aPIV2GetUniqueDataYearsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2InstantDataGetRaw(requestParameters: APIV2InstantDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/InstantData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2InstantDataGet(requestParameters: APIV2InstantDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.aPIV2InstantDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2IntervalsGetRaw(requestParameters: APIV2IntervalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/Intervals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2IntervalsGet(requestParameters: APIV2IntervalsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.aPIV2IntervalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2MaxGetRaw(requestParameters: APIV2MaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/Max`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2MaxGet(requestParameters: APIV2MaxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.aPIV2MaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2NetworksGetRaw(requestParameters: APIV2NetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/Networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2NetworksGet(requestParameters: APIV2NetworksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.aPIV2NetworksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2ProviderTypesColorDictionaryGetRaw(requestParameters: APIV2ProviderTypesColorDictionaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/ProviderTypesColorDictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async aPIV2ProviderTypesColorDictionaryGet(requestParameters: APIV2ProviderTypesColorDictionaryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.aPIV2ProviderTypesColorDictionaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIV2ProvidersGetRaw(requestParameters: APIV2ProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        if (requestParameters.subchainsOf !== undefined) {
            queryParameters['subchainsOf'] = requestParameters.subchainsOf;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/v2/Providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderResponseModelFromJSON));
    }

    /**
     */
    async aPIV2ProvidersGet(requestParameters: APIV2ProvidersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderResponseModel>> {
        const response = await this.aPIV2ProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
