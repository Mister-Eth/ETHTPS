/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AllDataModel,
  ProviderResponseModel,
  TimeInterval,
} from '../models';
import {
    AllDataModelFromJSON,
    AllDataModelToJSON,
    ProviderResponseModelFromJSON,
    ProviderResponseModelToJSON,
    TimeIntervalFromJSON,
    TimeIntervalToJSON,
} from '../models';

export interface ApiV2AllDataGetRequest {
    xAPIKey?: string;
    network?: string;
}

export interface ApiV2ColorDictionaryGetRequest {
    xAPIKey?: string;
}

export interface ApiV2GetIntervalsWithDataGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV2GetUniqueDataYearsGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV2InstantDataGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    smoothing?: string;
}

export interface ApiV2IntervalsGetRequest {
    xAPIKey?: string;
}

export interface ApiV2MaxGetRequest {
    xAPIKey?: string;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
}

export interface ApiV2NetworksGetRequest {
    xAPIKey?: string;
}

export interface ApiV2ProviderTypesColorDictionaryGetRequest {
    xAPIKey?: string;
}

export interface ApiV2ProvidersGetRequest {
    xAPIKey?: string;
    subchainsOf?: string;
}

/**
 * 
 */
export class GeneralApi extends runtime.BaseAPI {

    /**
     */
    async apiV2AllDataGetRaw(requestParameters: ApiV2AllDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AllDataModel>> {
        const queryParameters: any = {};

        if (requestParameters.network !== undefined) {
            queryParameters['network'] = requestParameters.network;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/AllData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AllDataModelFromJSON(jsonValue));
    }

    /**
     */
    async apiV2AllDataGet(requestParameters: ApiV2AllDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AllDataModel> {
        const response = await this.apiV2AllDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ColorDictionaryGetRaw(requestParameters: ApiV2ColorDictionaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/ColorDictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2ColorDictionaryGet(requestParameters: ApiV2ColorDictionaryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiV2ColorDictionaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2GetIntervalsWithDataGetRaw(requestParameters: ApiV2GetIntervalsWithDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeInterval>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GetIntervalsWithData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeIntervalFromJSON));
    }

    /**
     */
    async apiV2GetIntervalsWithDataGet(requestParameters: ApiV2GetIntervalsWithDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeInterval>> {
        const response = await this.apiV2GetIntervalsWithDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2GetUniqueDataYearsGetRaw(requestParameters: ApiV2GetUniqueDataYearsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/GetUniqueDataYears`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2GetUniqueDataYearsGet(requestParameters: ApiV2GetUniqueDataYearsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2GetUniqueDataYearsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2InstantDataGetRaw(requestParameters: ApiV2InstantDataGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.smoothing !== undefined) {
            queryParameters['smoothing'] = requestParameters.smoothing;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/InstantData`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2InstantDataGet(requestParameters: ApiV2InstantDataGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.apiV2InstantDataGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2IntervalsGetRaw(requestParameters: ApiV2IntervalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeInterval>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Intervals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeIntervalFromJSON));
    }

    /**
     */
    async apiV2IntervalsGet(requestParameters: ApiV2IntervalsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeInterval>> {
        const response = await this.apiV2IntervalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2MaxGetRaw(requestParameters: ApiV2MaxGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Max`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2MaxGet(requestParameters: ApiV2MaxGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.apiV2MaxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2NetworksGetRaw(requestParameters: ApiV2NetworksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Networks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2NetworksGet(requestParameters: ApiV2NetworksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2NetworksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ProviderTypesColorDictionaryGetRaw(requestParameters: ApiV2ProviderTypesColorDictionaryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/ProviderTypesColorDictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV2ProviderTypesColorDictionaryGet(requestParameters: ApiV2ProviderTypesColorDictionaryGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.apiV2ProviderTypesColorDictionaryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV2ProvidersGetRaw(requestParameters: ApiV2ProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.subchainsOf !== undefined) {
            queryParameters['subchainsOf'] = requestParameters.subchainsOf;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAPIKey !== undefined && requestParameters.xAPIKey !== null) {
            headerParameters['X-API-Key'] = String(requestParameters.xAPIKey);
        }

        const response = await this.request({
            path: `/api/v2/Providers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderResponseModelFromJSON));
    }

    /**
     */
    async apiV2ProvidersGet(requestParameters: ApiV2ProvidersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderResponseModel>> {
        const response = await this.apiV2ProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
