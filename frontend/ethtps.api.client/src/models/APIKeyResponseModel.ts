/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface APIKeyResponseModel
 */
export interface APIKeyResponseModel {
    /**
     * 
     * @type {boolean}
     * @memberof APIKeyResponseModel
     */
    readonly success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof APIKeyResponseModel
     */
    readonly failureReason?: string | null;
    /**
     * 
     * @type {string}
     * @memberof APIKeyResponseModel
     */
    readonly key?: string | null;
    /**
     * 
     * @type {number}
     * @memberof APIKeyResponseModel
     */
    readonly requestLimit24h?: number | null;
}

/**
 * Check if a given object implements the APIKeyResponseModel interface.
 */
export function instanceOfAPIKeyResponseModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function APIKeyResponseModelFromJSON(json: any): APIKeyResponseModel {
    return APIKeyResponseModelFromJSONTyped(json, false);
}

export function APIKeyResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): APIKeyResponseModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': !exists(json, 'success') ? undefined : json['success'],
        'failureReason': !exists(json, 'failureReason') ? undefined : json['failureReason'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'requestLimit24h': !exists(json, 'requestLimit24h') ? undefined : json['requestLimit24h'],
    };
}

export function APIKeyResponseModelToJSON(value?: APIKeyResponseModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

