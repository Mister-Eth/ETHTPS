/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Project } from './Project';
import {
    ProjectFromJSON,
    ProjectFromJSONTyped,
    ProjectToJSON,
} from './Project';

/**
 * 
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * 
     * @type {number}
     * @memberof Feature
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Feature
     */
    projectId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Feature
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Feature
     */
    details?: string | null;
    /**
     * 
     * @type {Project}
     * @memberof Feature
     */
    project?: Project;
}

/**
 * Check if a given object implements the Feature interface.
 */
export function instanceOfFeature(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FeatureFromJSON(json: any): Feature {
    return FeatureFromJSONTyped(json, false);
}

export function FeatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): Feature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'project': !exists(json, 'project') ? undefined : ProjectFromJSON(json['project']),
    };
}

export function FeatureToJSON(value?: Feature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'projectId': value.projectId,
        'enabled': value.enabled,
        'name': value.name,
        'details': value.details,
        'project': ProjectToJSON(value.project),
    };
}

