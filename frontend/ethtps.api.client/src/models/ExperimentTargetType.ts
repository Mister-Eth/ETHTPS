/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExperimentTarget } from './ExperimentTarget';
import {
    ExperimentTargetFromJSON,
    ExperimentTargetFromJSONTyped,
    ExperimentTargetToJSON,
} from './ExperimentTarget';

/**
 * 
 * @export
 * @interface ExperimentTargetType
 */
export interface ExperimentTargetType {
    /**
     * 
     * @type {number}
     * @memberof ExperimentTargetType
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ExperimentTargetType
     */
    targetTypeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExperimentTargetType
     */
    targetTypeValue?: string | null;
    /**
     * 
     * @type {Array<ExperimentTarget>}
     * @memberof ExperimentTargetType
     */
    readonly experimentTargets?: Array<ExperimentTarget> | null;
}

/**
 * Check if a given object implements the ExperimentTargetType interface.
 */
export function instanceOfExperimentTargetType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExperimentTargetTypeFromJSON(json: any): ExperimentTargetType {
    return ExperimentTargetTypeFromJSONTyped(json, false);
}

export function ExperimentTargetTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExperimentTargetType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'targetTypeName': !exists(json, 'targetTypeName') ? undefined : json['targetTypeName'],
        'targetTypeValue': !exists(json, 'targetTypeValue') ? undefined : json['targetTypeValue'],
        'experimentTargets': !exists(json, 'experimentTargets') ? undefined : (json['experimentTargets'] === null ? null : (json['experimentTargets'] as Array<any>).map(ExperimentTargetFromJSON)),
    };
}

export function ExperimentTargetTypeToJSON(value?: ExperimentTargetType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'targetTypeName': value.targetTypeName,
        'targetTypeValue': value.targetTypeValue,
    };
}

