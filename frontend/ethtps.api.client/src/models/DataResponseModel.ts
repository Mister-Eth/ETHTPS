/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataPoint } from './DataPoint';
import {
    DataPointFromJSON,
    DataPointFromJSONTyped,
    DataPointToJSON,
} from './DataPoint';

/**
 * 
 * @export
 * @interface DataResponseModel
 */
export interface DataResponseModel {
    /**
     * 
     * @type {Array<DataPoint>}
     * @memberof DataResponseModel
     */
    data?: Array<DataPoint> | null;
    /**
     * 
     * @type {string}
     * @memberof DataResponseModel
     */
    provider?: string | null;
}

/**
 * Check if a given object implements the DataResponseModel interface.
 */
export function instanceOfDataResponseModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DataResponseModelFromJSON(json: any): DataResponseModel {
    return DataResponseModelFromJSONTyped(json, false);
}

export function DataResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataResponseModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : (json['data'] === null ? null : (json['data'] as Array<any>).map(DataPointFromJSON)),
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
    };
}

export function DataResponseModelToJSON(value?: DataResponseModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : (value.data === null ? null : (value.data as Array<any>).map(DataPointToJSON)),
        'provider': value.provider,
    };
}

