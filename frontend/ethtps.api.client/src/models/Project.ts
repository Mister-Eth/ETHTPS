/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Feature } from './Feature';
import {
    FeatureFromJSON,
    FeatureFromJSONTyped,
    FeatureToJSON,
} from './Feature';
import type { Provider } from './Provider';
import {
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
} from './Provider';

/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Project
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    provider?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    website?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    details?: string | null;
    /**
     * 
     * @type {Array<Feature>}
     * @memberof Project
     */
    readonly features?: Array<Feature> | null;
    /**
     * 
     * @type {Provider}
     * @memberof Project
     */
    providerNavigation?: Provider;
}

/**
 * Check if a given object implements the Project interface.
 */
export function instanceOfProject(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProjectFromJSON(json: any): Project {
    return ProjectFromJSONTyped(json, false);
}

export function ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'features': !exists(json, 'features') ? undefined : (json['features'] === null ? null : (json['features'] as Array<any>).map(FeatureFromJSON)),
        'providerNavigation': !exists(json, 'providerNavigation') ? undefined : ProviderFromJSON(json['providerNavigation']),
    };
}

export function ProjectToJSON(value?: Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'enabled': value.enabled,
        'provider': value.provider,
        'name': value.name,
        'website': value.website,
        'details': value.details,
        'providerNavigation': ProviderToJSON(value.providerNavigation),
    };
}

