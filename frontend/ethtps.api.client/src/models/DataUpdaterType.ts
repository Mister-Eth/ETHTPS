/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataUpdater } from './DataUpdater';
import {
    DataUpdaterFromJSON,
    DataUpdaterFromJSONTyped,
    DataUpdaterToJSON,
} from './DataUpdater';

/**
 * 
 * @export
 * @interface DataUpdaterType
 */
export interface DataUpdaterType {
    /**
     * 
     * @type {number}
     * @memberof DataUpdaterType
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof DataUpdaterType
     */
    typeName?: string | null;
    /**
     * 
     * @type {Array<DataUpdater>}
     * @memberof DataUpdaterType
     */
    readonly dataUpdaters?: Array<DataUpdater> | null;
}

/**
 * Check if a given object implements the DataUpdaterType interface.
 */
export function instanceOfDataUpdaterType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DataUpdaterTypeFromJSON(json: any): DataUpdaterType {
    return DataUpdaterTypeFromJSONTyped(json, false);
}

export function DataUpdaterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DataUpdaterType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'typeName': !exists(json, 'typeName') ? undefined : json['typeName'],
        'dataUpdaters': !exists(json, 'dataUpdaters') ? undefined : (json['dataUpdaters'] === null ? null : (json['dataUpdaters'] as Array<any>).map(DataUpdaterFromJSON)),
    };
}

export function DataUpdaterTypeToJSON(value?: DataUpdaterType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'typeName': value.typeName,
    };
}

