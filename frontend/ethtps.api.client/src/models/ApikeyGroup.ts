/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Apikey } from './Apikey';
import {
    ApikeyFromJSON,
    ApikeyFromJSONTyped,
    ApikeyToJSON,
} from './Apikey';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
} from './Group';

/**
 * 
 * @export
 * @interface ApikeyGroup
 */
export interface ApikeyGroup {
    /**
     * 
     * @type {number}
     * @memberof ApikeyGroup
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ApikeyGroup
     */
    apikeyId?: number;
    /**
     * 
     * @type {number}
     * @memberof ApikeyGroup
     */
    groupId?: number;
    /**
     * 
     * @type {Apikey}
     * @memberof ApikeyGroup
     */
    apikey?: Apikey;
    /**
     * 
     * @type {Group}
     * @memberof ApikeyGroup
     */
    group?: Group;
}

/**
 * Check if a given object implements the ApikeyGroup interface.
 */
export function instanceOfApikeyGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApikeyGroupFromJSON(json: any): ApikeyGroup {
    return ApikeyGroupFromJSONTyped(json, false);
}

export function ApikeyGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApikeyGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'apikeyId': !exists(json, 'apikeyId') ? undefined : json['apikeyId'],
        'groupId': !exists(json, 'groupId') ? undefined : json['groupId'],
        'apikey': !exists(json, 'apikey') ? undefined : ApikeyFromJSON(json['apikey']),
        'group': !exists(json, 'group') ? undefined : GroupFromJSON(json['group']),
    };
}

export function ApikeyGroupToJSON(value?: ApikeyGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'apikeyId': value.apikeyId,
        'groupId': value.groupId,
        'apikey': ApikeyToJSON(value.apikey),
        'group': GroupToJSON(value.group),
    };
}

