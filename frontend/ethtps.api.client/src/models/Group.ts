/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.info API
 * Backend definition for ethtps.info; you\'re free to play around
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApikeyGroup } from './ApikeyGroup';
import {
    ApikeyGroupFromJSON,
    ApikeyGroupFromJSONTyped,
    ApikeyGroupToJSON,
} from './ApikeyGroup';
import type { GroupRole } from './GroupRole';
import {
    GroupRoleFromJSON,
    GroupRoleFromJSONTyped,
    GroupRoleToJSON,
} from './GroupRole';

/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    name?: string | null;
    /**
     * 
     * @type {Array<ApikeyGroup>}
     * @memberof Group
     */
    readonly apikeyGroups?: Array<ApikeyGroup> | null;
    /**
     * 
     * @type {Array<GroupRole>}
     * @memberof Group
     */
    readonly groupRoles?: Array<GroupRole> | null;
}

/**
 * Check if a given object implements the Group interface.
 */
export function instanceOfGroup(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'apikeyGroups': !exists(json, 'apikeyGroups') ? undefined : (json['apikeyGroups'] === null ? null : (json['apikeyGroups'] as Array<any>).map(ApikeyGroupFromJSON)),
        'groupRoles': !exists(json, 'groupRoles') ? undefined : (json['groupRoles'] === null ? null : (json['groupRoles'] as Array<any>).map(GroupRoleFromJSON)),
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
    };
}

