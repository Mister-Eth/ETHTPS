/* tslint:disable */
/* eslint-disable */
/**
 * ETHTPS.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataType,
  HomePageResponseModel,
  TimeInterval,
} from '../models';
import {
    DataTypeFromJSON,
    DataTypeToJSON,
    HomePageResponseModelFromJSON,
    HomePageResponseModelToJSON,
    TimeIntervalFromJSON,
    TimeIntervalToJSON,
} from '../models';

export interface APIPagesHomeGetRequest {
    subchainsOf?: string;
    interval?: TimeInterval;
    dataType?: DataType;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

export interface APIPagesProviderGetRequest {
    interval?: TimeInterval;
    dataType?: DataType;
    provider?: string;
    network?: string;
    includeSidechains?: boolean;
    xAPIKey?: string;
}

/**
 * 
 */
export class PageModelApi extends runtime.BaseAPI {

    /**
     */
    async aPIPagesHomeGetRaw(requestParameters: APIPagesHomeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HomePageResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.subchainsOf !== undefined) {
            queryParameters['SubchainsOf'] = requestParameters.subchainsOf;
        }

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/Pages/Home`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HomePageResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async aPIPagesHomeGet(requestParameters: APIPagesHomeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HomePageResponseModel> {
        const response = await this.aPIPagesHomeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aPIPagesProviderGetRaw(requestParameters: APIPagesProviderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.interval !== undefined) {
            queryParameters['Interval'] = requestParameters.interval;
        }

        if (requestParameters.dataType !== undefined) {
            queryParameters['DataType'] = requestParameters.dataType;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['Provider'] = requestParameters.provider;
        }

        if (requestParameters.network !== undefined) {
            queryParameters['Network'] = requestParameters.network;
        }

        if (requestParameters.includeSidechains !== undefined) {
            queryParameters['IncludeSidechains'] = requestParameters.includeSidechains;
        }

        if (requestParameters.xAPIKey !== undefined) {
            queryParameters['XAPIKey'] = requestParameters.xAPIKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/API/Pages/Provider`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async aPIPagesProviderGet(requestParameters: APIPagesProviderGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.aPIPagesProviderGetRaw(requestParameters, initOverrides);
    }

}
