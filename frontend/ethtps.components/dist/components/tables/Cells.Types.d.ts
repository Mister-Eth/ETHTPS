/// <reference types="react" />
import { TableCellProps } from '@mui/material';
export declare const centered: TableCellProps;
export declare const animatedCentered: {
    className: string;
    align?: "center" | "right" | "left" | "inherit" | "justify";
    children?: import("react").ReactNode;
    classes?: Partial<import("@mui/material").TableCellClasses>;
    component?: import("react").ElementType<import("@mui/material").TableCellBaseProps>;
    padding?: "none" | "normal" | "checkbox";
    scope?: string;
    size?: "small" | "medium";
    sortDirection?: import("@mui/material").SortDirection;
    sx?: import("@mui/material").SxProps<import("@mui/material").Theme>;
    variant?: "body" | "footer" | "head";
    abbr?: string;
    slot?: string;
    style?: import("react").CSSProperties;
    title?: string;
    placeholder?: string;
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    contentEditable?: "inherit" | (boolean | "false" | "true");
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    id?: string;
    lang?: string;
    nonce?: string;
    spellCheck?: boolean | "false" | "true";
    tabIndex?: number;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: import("react").AriaRole;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "search" | "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    'aria-activedescendant'?: string;
    'aria-atomic'?: boolean | "false" | "true";
    'aria-autocomplete'?: "list" | "none" | "inline" | "both";
    'aria-busy'?: boolean | "false" | "true";
    'aria-checked'?: boolean | "mixed" | "false" | "true";
    'aria-colcount'?: number;
    'aria-colindex'?: number;
    'aria-colspan'?: number;
    'aria-controls'?: string;
    'aria-current'?: boolean | "time" | "step" | "page" | "false" | "true" | "date" | "location";
    'aria-describedby'?: string;
    'aria-details'?: string;
    'aria-disabled'?: boolean | "false" | "true";
    'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup";
    'aria-errormessage'?: string;
    'aria-expanded'?: boolean | "false" | "true";
    'aria-flowto'?: string;
    'aria-grabbed'?: boolean | "false" | "true";
    'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "listbox" | "false" | "true" | "tree";
    'aria-hidden'?: boolean | "false" | "true";
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling";
    'aria-keyshortcuts'?: string;
    'aria-label'?: string;
    'aria-labelledby'?: string;
    'aria-level'?: number;
    'aria-live'?: "off" | "assertive" | "polite";
    'aria-modal'?: boolean | "false" | "true";
    'aria-multiline'?: boolean | "false" | "true";
    'aria-multiselectable'?: boolean | "false" | "true";
    'aria-orientation'?: "horizontal" | "vertical";
    'aria-owns'?: string;
    'aria-placeholder'?: string;
    'aria-posinset'?: number;
    'aria-pressed'?: boolean | "mixed" | "false" | "true";
    'aria-readonly'?: boolean | "false" | "true";
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    'aria-required'?: boolean | "false" | "true";
    'aria-roledescription'?: string;
    'aria-rowcount'?: number;
    'aria-rowindex'?: number;
    'aria-rowspan'?: number;
    'aria-selected'?: boolean | "false" | "true";
    'aria-setsize'?: number;
    'aria-sort'?: "none" | "ascending" | "descending" | "other";
    'aria-valuemax'?: number;
    'aria-valuemin'?: number;
    'aria-valuenow'?: number;
    'aria-valuetext'?: string;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onCopyCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onCut?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onCutCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onPaste?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onPasteCapture?: import("react").ClipboardEventHandler<HTMLTableCellElement>;
    onCompositionEnd?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onCompositionStart?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onCompositionUpdate?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLTableCellElement>;
    onFocus?: import("react").FocusEventHandler<HTMLTableCellElement>;
    onFocusCapture?: import("react").FocusEventHandler<HTMLTableCellElement>;
    onBlur?: import("react").FocusEventHandler<HTMLTableCellElement>;
    onBlurCapture?: import("react").FocusEventHandler<HTMLTableCellElement>;
    onChange?: import("react").FormEventHandler<HTMLTableCellElement>;
    onChangeCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onBeforeInput?: import("react").FormEventHandler<HTMLTableCellElement>;
    onBeforeInputCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onInput?: import("react").FormEventHandler<HTMLTableCellElement>;
    onInputCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onReset?: import("react").FormEventHandler<HTMLTableCellElement>;
    onResetCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onSubmit?: import("react").FormEventHandler<HTMLTableCellElement>;
    onSubmitCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onInvalid?: import("react").FormEventHandler<HTMLTableCellElement>;
    onInvalidCapture?: import("react").FormEventHandler<HTMLTableCellElement>;
    onLoad?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onError?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onErrorCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onKeyDown?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onKeyDownCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onKeyPress?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onKeyPressCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onKeyUp?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onKeyUpCapture?: import("react").KeyboardEventHandler<HTMLTableCellElement>;
    onAbort?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onAbortCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onCanPlay?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onCanPlayCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onCanPlayThrough?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onDurationChange?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onDurationChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEmptied?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEmptiedCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEncrypted?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEncryptedCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEnded?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onEndedCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadedData?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadedDataCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadedMetadata?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadStart?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onLoadStartCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPause?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPauseCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPlay?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPlayCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPlaying?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onPlayingCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onProgress?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onProgressCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onRateChange?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onRateChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onResize?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onResizeCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSeeked?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSeekedCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSeeking?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSeekingCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onStalled?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onStalledCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSuspend?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSuspendCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onTimeUpdate?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onVolumeChange?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onWaiting?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onWaitingCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onAuxClick?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onAuxClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onClick?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onContextMenu?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onContextMenuCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onDoubleClick?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onDoubleClickCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onDrag?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragEnd?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragEndCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragEnter?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragEnterCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragExit?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragExitCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragLeave?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragLeaveCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragOver?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragOverCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragStart?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDragStartCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDrop?: import("react").DragEventHandler<HTMLTableCellElement>;
    onDropCapture?: import("react").DragEventHandler<HTMLTableCellElement>;
    onMouseDown?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseDownCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseEnter?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseLeave?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseMove?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseMoveCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseOut?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseOutCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseOver?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseOverCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseUp?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onMouseUpCapture?: import("react").MouseEventHandler<HTMLTableCellElement>;
    onSelect?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onSelectCapture?: import("react").ReactEventHandler<HTMLTableCellElement>;
    onTouchCancel?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchCancelCapture?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchEnd?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchEndCapture?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchMove?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchMoveCapture?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchStart?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onTouchStartCapture?: import("react").TouchEventHandler<HTMLTableCellElement>;
    onPointerDown?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerDownCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerMove?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerMoveCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerUp?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerUpCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerCancel?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerCancelCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerEnter?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerEnterCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerLeave?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerOver?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerOverCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerOut?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onPointerOutCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onGotPointerCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onLostPointerCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLTableCellElement>;
    onScroll?: import("react").UIEventHandler<HTMLTableCellElement>;
    onScrollCapture?: import("react").UIEventHandler<HTMLTableCellElement>;
    onWheel?: import("react").WheelEventHandler<HTMLTableCellElement>;
    onWheelCapture?: import("react").WheelEventHandler<HTMLTableCellElement>;
    onAnimationStart?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onAnimationEnd?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onAnimationIteration?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLTableCellElement>;
    onTransitionEnd?: import("react").TransitionEventHandler<HTMLTableCellElement>;
    onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLTableCellElement>;
    width?: string | number;
    height?: string | number;
    colSpan?: number;
    headers?: string;
    rowSpan?: number;
    valign?: "top" | "bottom" | "baseline" | "middle";
    ref?: import("react").Ref<unknown>;
};
